*exeline.txt*	        For Vim version 7.3	Last change: 2015 October


		  EXELINE    by Rom Grk


Help on exeline     					*exeline-help*

1. Intro	        	|exeline-intro|
2. Autocmd                      |exeline-autocmd|
3. Extension                    |exeline-extend|
4. Examples & Defaults  	|exeline-examples|

==============================================================================
1. Intro  					        *exeline-intro*

An exeline is like a modeline, but instead of setting style properties, it
execute commands on save.

Exeline looks for the pattern `!::CMD` `[ARGS]` in the first 10 lines and the
last 5 lines of a file. `CMD` is a word, and `ARGS` is anything (and optionnal). 

==============================================================================
2. Autocommand events	                                 *exeline-autocmd*

There is only one autocommand by default: >
    augroup Exeline
        au!
        au BufWritePost * call exeline#find()
    augroup END
<Very basic: it looks for an exeline to run; does nothing if there isn't.
NOTE: `exeline#find` finds at most one exeline.

You could define new autocommands, e.g. BufWritePre, as follow >
    au BufWritePre  *.foo call exeline#find()
<This could be useful, for example, if you wanted to have a script that
would delete trailing whitespaces before saving the file. Such a script
could be implemented like... `(see` `next` `section)`

==============================================================================
3. Extension	                                          *exeline-extend*
~
You can define exelines by defining a function as follow: >
    
    let exeline = {}
    fu! exeline.foo (expression)
        echo a:expression
    endfu

Or as this (!> will only work if defined in a file named `exeline.vim`) >

    function! exeline#foo (expression)
        echo a:expression
    endfunction
<
In both cases, having the pattern `!::foo` `[bar]` in a file would 
echo 'bar'. 

==============================================================================
4. Examples & defaults                   *exeline-defaults*  *exeline-examples*
~
- Auto-source vimscript file: >
    !::exe [so %] 
< Note that `exe` argument can be any vimscript expression. It could be >
 let g:somevar = 5 | call search('patt', '') | UserDefinedCommand %

- Output HTML file generated by current markdown file in parent directory: >
    !::md [..]

- Compile current coffeescript file to home directory: >
    !::coffee [~]
>
Other default commands are `sass`, `less` and `jade`. They behave as `md`. >
 5 lines til EOF



 vim:tw=78:ts=8:ft=help:norl:
